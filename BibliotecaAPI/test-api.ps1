

$baseUrl = "http://localhost:5000"
$headers = @{
    "Content-Type" = "application/json"
}

Write-Host "üöÄ Iniciando testes da Biblioteca API..." -ForegroundColor Green
Write-Host "Base URL: $baseUrl" -ForegroundColor Yellow
Write-Host ""

# Vari√°veis para armazenar IDs criados
$livroId = $null
$usuarioId = $null
$emprestimoId = $null

# Fun√ß√£o para fazer requisi√ß√µes HTTP
function Invoke-ApiRequest {
    param(
        [string]$Method,
        [string]$Uri,
        [string]$Body = $null
    )
    
    try {
        if ($Body) {
            $response = Invoke-RestMethod -Uri $Uri -Method $Method -Headers $headers -Body $Body
        } else {
            $response = Invoke-RestMethod -Uri $Uri -Method $Method -Headers $headers
        }
        return $response
    }
    catch {
        Write-Host "‚ùå Erro: $($_.Exception.Message)" -Foreg    roundColor Red
        return $null
    }
}

# Teste 1: Criar Livro
Write-Host "üìö Teste 1: Criando livro..." -ForegroundColor Cyan
$livroData = @{
    titulo = "Clean Code"
    autor = "Robert C. Martin"
    anoPublicacao = 2008
    genero = "Programa√ß√£o"
} | ConvertTo-Json

$livro = Invoke-ApiRequest -Method "POST" -Uri "$baseUrl/api/livros" -Body $livroData
if ($livro) {
    $livroId = $livro.id
    Write-Host "‚úÖ Livro criado com sucesso! ID: $livroId" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao criar livro" -ForegroundColor Red
    exit 1
}

# Teste 2: Buscar Livro por ID
Write-Host "üìñ Teste 2: Buscando livro por ID..." -ForegroundColor Cyan
$livroBuscado = Invoke-ApiRequest -Method "GET" -Uri "$baseUrl/api/livros/$livroId"
if ($livroBuscado) {
    Write-Host "‚úÖ Livro encontrado: $($livroBuscado.titulo)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao buscar livro" -ForegroundColor Red
}

# Teste 3: Listar Todos os Livros
Write-Host "üìö Teste 3: Listando todos os livros..." -ForegroundColor Cyan
$livros = Invoke-ApiRequest -Method "GET" -Uri "$baseUrl/api/livros"
if ($livros) {
    Write-Host "‚úÖ Encontrados $($livros.Count) livros" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao listar livros" -ForegroundColor Red
}

# Teste 4: Criar Usu√°rio
Write-Host "üë§ Teste 4: Criando usu√°rio..." -ForegroundColor Cyan
$usuarioData = @{
    nome = "Jo√£o Silva"
    email = "joao@email.com"
    telefone = "(11) 99999-9999"
} | ConvertTo-Json

$usuario = Invoke-ApiRequest -Method "POST" -Uri "$baseUrl/api/usuarios" -Body $usuarioData
if ($usuario) {
    $usuarioId = $usuario.id
    Write-Host "‚úÖ Usu√°rio criado com sucesso! ID: $usuarioId" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao criar usu√°rio" -ForegroundColor Red
    exit 1
}

# Teste 5: Buscar Usu√°rio por ID
Write-Host "üë• Teste 5: Buscando usu√°rio por ID..." -ForegroundColor Cyan
$usuarioBuscado = Invoke-ApiRequest -Method "GET" -Uri "$baseUrl/api/usuarios/$usuarioId"
if ($usuarioBuscado) {
    Write-Host "‚úÖ Usu√°rio encontrado: $($usuarioBuscado.nome)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao buscar usu√°rio" -ForegroundColor Red
}

# Teste 6: Listar Todos os Usu√°rios
Write-Host "üë• Teste 6: Listando todos os usu√°rios..." -ForegroundColor Cyan
$usuarios = Invoke-ApiRequest -Method "GET" -Uri "$baseUrl/api/usuarios"
if ($usuarios) {
    Write-Host "‚úÖ Encontrados $($usuarios.Count) usu√°rios" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao listar usu√°rios" -ForegroundColor Red
}

# Teste 7: Criar Empr√©stimo
Write-Host "üìñ Teste 7: Criando empr√©stimo..." -ForegroundColor Cyan
$emprestimoData = @{
    livroId = $livroId
    usuarioId = $usuarioId
} | ConvertTo-Json

$emprestimo = Invoke-ApiRequest -Method "POST" -Uri "$baseUrl/api/emprestimos" -Body $emprestimoData
if ($emprestimo) {
    $emprestimoId = $emprestimo.id
    Write-Host "‚úÖ Empr√©stimo criado com sucesso! ID: $emprestimoId" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao criar empr√©stimo" -ForegroundColor Red
    exit 1
}

# Teste 8: Buscar Empr√©stimo por ID
Write-Host "üìã Teste 8: Buscando empr√©stimo por ID..." -ForegroundColor Cyan
$emprestimoBuscado = Invoke-ApiRequest -Method "GET" -Uri "$baseUrl/api/emprestimos/$emprestimoId"
if ($emprestimoBuscado) {
    Write-Host "‚úÖ Empr√©stimo encontrado: $($emprestimoBuscado.tituloLivro) para $($emprestimoBuscado.nomeUsuario)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao buscar empr√©stimo" -ForegroundColor Red
}

# Teste 9: Listar Todos os Empr√©stimos
Write-Host "üìã Teste 9: Listando todos os empr√©stimos..." -ForegroundColor Cyan
$emprestimos = Invoke-ApiRequest -Method "GET" -Uri "$baseUrl/api/emprestimos"
if ($emprestimos) {
    Write-Host "‚úÖ Encontrados $($emprestimos.Count) empr√©stimos" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao listar empr√©stimos" -ForegroundColor Red
}

# Teste 10: Devolver Livro
Write-Host "üîÑ Teste 10: Devolvendo livro..." -ForegroundColor Cyan
$devolucaoData = @{
    dataDevolucao = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
} | ConvertTo-Json

$devolucao = Invoke-ApiRequest -Method "PUT" -Uri "$baseUrl/api/emprestimos/$emprestimoId/devolver" -Body $devolucaoData
if ($devolucao) {
    Write-Host "‚úÖ Livro devolvido com sucesso!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao devolver livro" -ForegroundColor Red
}

# Teste 11: Atualizar Livro
Write-Host "‚úèÔ∏è Teste 11: Atualizando livro..." -ForegroundColor Cyan
$livroUpdateData = @{
    titulo = "Clean Code - Edi√ß√£o Atualizada"
    anoPublicacao = 2020
} | ConvertTo-Json

$livroAtualizado = Invoke-ApiRequest -Method "PUT" -Uri "$baseUrl/api/livros/$livroId" -Body $livroUpdateData
if ($livroAtualizado) {
    Write-Host "‚úÖ Livro atualizado: $($livroAtualizado.titulo)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao atualizar livro" -ForegroundColor Red
}

# Teste 12: Atualizar Usu√°rio
Write-Host "‚úèÔ∏è Teste 12: Atualizando usu√°rio..." -ForegroundColor Cyan
$usuarioUpdateData = @{
    nome = "Jo√£o Silva Santos"
    email = "joao.santos@email.com"
} | ConvertTo-Json

$usuarioAtualizado = Invoke-ApiRequest -Method "PUT" -Uri "$baseUrl/api/usuarios/$usuarioId" -Body $usuarioUpdateData
if ($usuarioAtualizado) {
    Write-Host "‚úÖ Usu√°rio atualizado: $($usuarioAtualizado.nome)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao atualizar usu√°rio" -ForegroundColor Red
}

# Teste 13: Deletar Empr√©stimo
Write-Host "üóëÔ∏è Teste 13: Deletando empr√©stimo..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/api/emprestimos/$emprestimoId" -Method "DELETE" -Headers $headers
    if ($response.StatusCode -eq 204) {
        Write-Host "‚úÖ Empr√©stimo deletado com sucesso!" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Falha ao deletar empr√©stimo: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 14: Deletar Usu√°rio
Write-Host "üóëÔ∏è Teste 14: Deletando usu√°rio..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/api/usuarios/$usuarioId" -Method "DELETE" -Headers $headers
    if ($response.StatusCode -eq 204) {
        Write-Host "‚úÖ Usu√°rio deletado com sucesso!" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Falha ao deletar usu√°rio: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 15: Deletar Livro
Write-Host "üóëÔ∏è Teste 15: Deletando livro..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/api/livros/$livroId" -Method "DELETE" -Headers $headers
    if ($response.StatusCode -eq 204) {
        Write-Host "‚úÖ Livro deletado com sucesso!" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Falha ao deletar livro: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéâ Testes conclu√≠dos!" -ForegroundColor Green
Write-Host "üìä Resumo dos testes executados:" -ForegroundColor Yellow
Write-Host "  ‚Ä¢ Cria√ß√£o de entidades (Livro, Usu√°rio, Empr√©stimo)" -ForegroundColor White
Write-Host "  ‚Ä¢ Busca por ID" -ForegroundColor White
Write-Host "  ‚Ä¢ Listagem de todas as entidades" -ForegroundColor White
Write-Host "  ‚Ä¢ Atualiza√ß√£o de dados" -ForegroundColor White
Write-Host "  ‚Ä¢ Devolu√ß√£o de livro" -ForegroundColor White
Write-Host "  ‚Ä¢ Exclus√£o de entidades" -ForegroundColor White
